Noteworthy changes in version 1.21.0 (unreleased)
-------------------------------------------------

 * Qt Jobs working with QIODeviceDataProvider now properly
 handle input-size hints and progress for files larger.
 2^32 bytes in 32 bit builds.  [T6534]

 * Error::isCanceled now also returns true for error code
   GPG_ERR_FULLY_CANCELED.  [T6510]

* Interface changes relative to the 1.20.0 release:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 cpp: Data::setFlag                         NEW.
 cpp: Data::setSizeHint                     NEW.

Noteworthy changes in version 1.20.0 (2023-04-20)
-------------------------------------------------

 * On Windows, the gettext functions provided by gpgrt are switched
   into utf8 mode, so that all localized texts returned by GpgME or
   gpgrt, e.g. the texts for error codes are now UTF-8 encoded.
   [T5960]

 * Key::canSign now returns false for OpenPGP keys without signing
   (sub)key.  [T6456]

 * The new macOS Homebrew location is now by default supported.
   [T6440]

 * Fix regression in 1.19.0.  [rMb608c084b9]

 * Fix invocation of gpgtar on Windows.  [rM0c29119e06]

 * Interface changes relative to the 1.19.0 release:
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 gpgme_subkey_t              EXTENDED: New field 'can_renc'.
 gpgme_subkey_t              EXTENDED: New field 'can_timestamp'.
 gpgme_subkey_t              EXTENDED: New field 'is_group_owned'.
 cpp: Subkey::canRenc                       NEW.
 cpp: Subkey::canTimestamp                  NEW.
 cpp: Subkey::isGroupOwned                  NEW.
 cpp: Key::canReallySign                    DEPRECATED.

 [c=C40/A29/R0 cpp=C23/A17/R0 qt=C17/A2/R1]

 Release-info: https://dev.gnupg.org/T6463


Noteworthy changes in version 1.19.0 (2023-03-17)
-------------------------------------------------

 * New convenience option --identify for gpgme-json.

 * New context flag "no-auto-check-trustdb".  [T6261]

 * Optionally, build QGpgME for Qt 6

 * Support component "gpgtar-name" in gpgme_get_dirinfo.  [T6342]

 * Extended gpgme_op_encrypt*, gpgme_op_encrypt_sign*, and
   gpgme_op_sign* to allow creating an encrypted and/or signed
   archive.  [T6342]

 * Extended gpgme_op_decrypt*, gpgme_op_decrypt_verify*, and gpgme_op_verify*
   to allow extracting an encrypted and/or signed archive.  [T6342]

 * cpp: Handle error when trying to sign expired keys.  [T6155]

 * cpp: Support encryption flags ThrowKeyIds, EncryptWrap, and WantAddress.
   [T6359]

 * cpp, qt: Fix building with C++11.  [T6141]

 * qt: Fix problem with expiration dates after 2038-01-19 on 32-bit systems
   when adding an existing subkey to another key.  [T6137]

 * cpp: Allow setting the curve to use when generating ECC keys
   for smart cards.  [T4429]

 * qt: Extend ListAllKeysJob to allow disabling the automatic trust database
   check when listing all keys.  [T6261]

 * qt: Allow deferred start of import jobs.  [T6323]

 * qt: Support creating and extracting signed and encrypted archives.  [T6342]

 * Interface changes relative to the 1.18.0 release:
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 gpgme_get_ctx_flag                EXTENDED: New flag 'no-auto-check-trustdb'.
 gpgme_set_ctx_flag                EXTENDED: New flag 'no-auto-check-trustdb'.
 GPGME_DECRYPT_ARCHIVE                      NEW.
 GPGME_ENCRYPT_ARCHIVE                      NEW.
 GPGME_SIG_MODE_ARCHIVE                     NEW.
 GPGME_VERIFY_ARCHIVE                       NEW.
 gpgme_verify_flags_t                       NEW.
 gpgme_op_verify_ext_start                  NEW.
 gpgme_op_verify_ext                        NEW.
 cpp: GpgGenCardKeyInteractor::Curve        NEW.
 cpp: GpgGenCardKeyInteractor::setCurve     NEW.
 cpp: Context::WantAddress                  NEW.
 cpp: Context::DecryptArchive               NEW.
 cpp: Context::EncryptArchive               NEW.
 cpp: SignArchive                           NEW.
 cpp: Data::setFileName            EXTENDED: New overload
 qt: ListAllKeysJob::Option                 NEW.
 qt: ListAllKeysJob::Options                NEW.
 qt: ListAllKeysJob::setOptions             NEW.
 qt: ListAllKeysJob::options                NEW.
 qt: Job::startNow                          NEW.
 qt: ImportJob::startLater                  NEW.
 qt: FileListDataProvider                   NEW.
 qt: DecryptVerifyArchiveJob                NEW.
 qt: EncryptArchiveJob                      NEW.
 qt: SignArchiveJob                         NEW.
 qt: SignEncryptArchiveJob                  NEW.
 qt: Protocol::decryptVerifyArchiveJob      NEW.
 qt: Protocol::encryptArchiveJob            NEW.
 qt: Protocol::signArchiveJob               NEW.
 qt: Protocol::signEncryptArchiveJob        NEW.
 qt: Job::jobProgress                       NEW.
 qt: Job::rawProgress                       NEW.
 qt: Job::progress                          DEPRECATED.

 [c=C39/A28/R0 cpp=C22/A16/R0 qt=C17/A2/R0]

 Release-info: https://dev.gnupg.org/T6341


Noteworthy changes in version 1.18.0 (2022-08-10)
-------------------------------------------------

 * New keylist mode to force refresh via external methods.  [T5951]

 * The keylist operations now create an import result to report the
   result of the locate keylist modes.  [T5951]

 * core: Return BAD_PASSPHRASE error code on symmetric decryption
   failure.  [T5939]

 * cpp, qt: Do not export internal symbols anymore.  [T5906]

 * cpp, qt: Support revocation of own OpenPGP keys.  [T5904]

 * qt: The file name of (signed and) encrypted data can now be set.  [T6056]

 * cpp, qt: Support setting the primary user ID.  [T5938]

 * python: Fix segv(NULL) when inspecting contect after exeception.  [T6060]

 * Interface changes relative to the 1.17.1 release:
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 GPGME_KEYLIST_MODE_FORCE_EXTERN            NEW.
 GPGME_KEYLIST_MODE_LOCATE_EXTERNAL         NEW.
 cpp: RevocationReason                      NEW.
 cpp: GpgRevokeKeyEditInteractor            NEW.
 cpp: Result::setError                      NEW.
 cpp: KeyListMode::ForceExtern              NEW.
 cpp: KeyListMode::LocateExternal           NEW.
 cpp: KeyListMode::KeyListModeMask          NEW.
 cpp: ImportResult::mergeWith               NEW.
 cpp: KeyListModeSaver                      NEW.
 cpp: Context::setPrimaryUid                NEW.
 cpp: Context::startSetPrimaryUid           NEW.
 qt: RevokeKeyJob                           NEW.
 qt: Protocol::revokeKeyJob                 NEW.
 qt: EncryptJob::setFileName                NEW.
 qt: EncryptJob::fileName                   NEW.
 qt: SignEncryptJob::setFileName            NEW.
 qt: SignEncryptJob::fileName               NEW.
 qt: SetPrimaryUserIDJob                    NEW.
 qt: Protocol::setPrimaryUserIDJob          NEW.

 [c=C38/A27/R0 cpp=C21/A15/R0 qt=C16/A1/R0]

 Release-info: https://dev.gnupg.org/T6128


Noteworthy changes in version 1.17.1 (2022-03-06)
-------------------------------------------------

 * qt: Fix a bug in the ABI compatibility of 1.17.0.  [T5834]

 [c=C37/A26/R0 cpp=C20/A14/R0 qt=C15/A0/R0]

 Release-info: https://dev.gnupg.org/T5872


Noteworthy changes in version 1.17.0 (2022-02-07)
-------------------------------------------------

 * New context flag "key-origin".  [#5733]

 * New context flag "import-filter".  [#5739]

 * New export mode to export secret subkeys.  [#5757]

 * Detect errors during the export of secret keys.  [#5766]

 * New function gpgme_op_receive_keys to import keys from a keyserver
   without first running a key listing.  [#5808]

 * Detect bad passphrase error in certificate import.  [T5713]

 * Allow setting --key-origin when importing keys.  [T5733]

 * Support components "keyboxd", "gpg-agent", "scdaemon", "dirmngr",
   "pinentry", and "socketdir" in gpgme_get_dirinfo.  [T5727,T5613]

 * Under Unix use poll(2) instead of select(2), when available.
   [T2385]

 * Do not use --flat_namespace when linking for macOS.  [T5610]

 * Fix results returned by gpgme_data_* functions.  [T5481]

 * Support closefrom also for glibc.  [rM4b64774b6d]

 * cpp,qt: Add support for export of secret keys and secret subkeys.
   [#5757]

 * cpp,qt: Support for adding existing subkeys to other keys.  [#5770]

 * qt: Extend ChangeExpiryJob to change expiration of primary key
   and of subkeys at the same time.  [#4717]

 * qt: Support WKD lookup without implicit import.  [#5728]

 * qt: Allow specifying an import filter when importing keys.  [#5739]

 * qt: Expect UTF-8 on stderr on Windows.  [rM8fe1546282]

 * qt: Allow retrieving the default value of a config entry.  [T5515]

 * Interface changes relative to the 1.16.0 release:
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 gpgme_op_receive_keys                      NEW.
 gpgme_op_receive_keys_start                NEW.
 qt: Protocol::secretSubkeyExportJob        NEW.
 cpp: Context::exportSecretSubkeys          NEW.
 cpp: Context::startSecretSubkeyExport      NEW.
 qt: Protocol::secretKeyExportJob      CHANGED: Param 'charset' is ignored.
 cpp: Context::exportKeys                   NEW.
 cpp: Context::startKeyExport               NEW.
 cpp: Context::exportSecretKeys             NEW.
 cpp: Context::startSecretKeyExport         NEW.
 cpp: GpgAddExistingSubkeyEditInteractor    NEW.
 GPGME_EXPORT_MODE_SECRET_SUBKEY            NEW.
 gpgme_set_ctx_flag                    EXTENDED: New flag 'key-origin'.
 gpgme_set_ctx_flag                    EXTENDED: New flag 'import-filter'.
 qt: ChangeExpiryJob::Option                NEW.
 qt: ChangeExpiryJob::Options               NEW.
 qt: ChangeExpiryJob::setOptions            NEW.
 qt: ChangeExpiryJob::options               NEW.
 qt: CryptoConfigEntry::defaultValue        NEW.
 qt: WKDLookupJob                           NEW.
 qt: WKDLookupResult                        NEW.
 qt: Protocol::wkdLookupJob                 NEW.
 qt: ImportJob::setKeyOrigin                NEW.
 qt: ImportJob::keyOrigin                   NEW.
 qt: ImportJob::keyOriginUrl                NEW.
 qt: setImportFilter                        NEW.
 qt: importFilter                           NEW.
 qt: AddExistingSubkeyJob                   NEW.
 qt: Protocol::addExistingSubkeyJob         NEW.

 [c=C37/A26/R0 cpp=C20/A14/R0 qt=C14/A7/R0]

 Release-info: https://dev.gnupg.org/T5819


Noteworthy changes in version 1.16.0 (2021-06-24)
-------------------------------------------------

 * New context flag "cert-expire".  [#5505]

 * New data flags "io-buffer-size" and "sensitive".  [#5478]

 * Increase I/O buffer size from 512 to 4k under Windows.

 * cpp,qt: Add support for trust signatures. [#5421]

 * qt: Add support for flags in LDAP server options. [#5217]

 * qt: Fix too high memory consumption due to QProcess.  [#5475]

 * qt: Do not set empty base DN as query of keyserver URL.  [#5465]

 * qt: Extend SignKeyJob to create signatures with expiration date.
   [5506]

 * python: New optional parameter filter_signatures for decrypt.
   [#5292]

 * Interface changes relative to the 1.15.1 release:
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 gpgme_set_ctx_flag                    EXTENDED: New flag 'cert-expire'.
 cpp: SignKeyJob::setTrustSignature         NEW.
 cpp: TrustSignatureTrust                   NEW.
 cpp: GpgSignKeyEditInteractor::setTrustSignatureTrust NEW.
 cpp: GpgSignKeyEditInteractor::setTrustSignatureDepth NEW.
 cpp: GpgSignKeyEditInteractor::setTrustSignatureScope NEW.
 cpp: UserID::Signature::isTrustSignature   NEW.
 cpp: UserID::Signature::trustValue         NEW.
 cpp: UserID::Signature::trustDepth         NEW.
 cpp: UserID::Signature::trustScope         NEW.
 gpgme_key_sig_t                       EXTENDED: New field 'trust_depth'.
 gpgme_key_sig_t                       EXTENDED: New field 'trust_value'.
 gpgme_key_sig_t                       EXTENDED: New field 'trust_scope'.
 GPGME_KEYSIGN_FORCE                   NEW.
 qt: CryptoConfig::entry               CHANGED: Added overload; deprecated old

 [c=C36/A25/R0 cpp=C19/A13/R0 qt=C13/A6/R0]

 Release-info: https://dev.gnupg.org/T5499


Noteworthy changes in version 1.15.1 (2021-01-08)
-------------------------------------------------

 * Fix another bug in the secret key export.  [#5046]

 * Make listing of signatures work if only secret keys are listed.  [#3580]

 * Fix build problem on FreeBSD.  [a6220adf30]

 * qt: Avoid empty "rem@gnupg.org" signature notations.  [#5142]

 * python: Fix key_export functions.  [#5149]


 [c=C35/A24/R1 cpp=C18/A12/R1 qt=C12/A5/R1]

 Release-info: https://dev.gnupg.org/T5225


Noteworthy changes in version 1.15.0 (2020-11-12)
-------------------------------------------------

 * New function gpgme_op_setexpire to make changing the expiration
   easier (requires GnuPG 2.1.22). [#4999]

 * New function gpgme_op_revsig to revoke key signatures (requires
   GnuPG 2.2.24). [#5094]

 * Support exporting secret keys. [#5046]

 * cpp: Support for set expire operations in the C++ bindings. [#5003]

 * cpp: Support for revoking key signatures in the C++ bindings. [#5094]

 * qt: Extended ChangeExpiryJob to support changing the expiry of
   subkeys. [#4717]

 * qt: Extended QuickJob to support revoking of key signatures. [#5094]

 * qt: Added QDebug stream operator for GpgME::Error.

 * Require a somewhat newer version of libgpg-error (1.36).

 * Interface changes relative to the 1.14.0 release:
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 gpgme_op_setexpire_start                   NEW.
 gpgme_op_setexpire                         NEW.
 gpgme_op_revsig_start                      NEW.
 gpgme_op_revsig                            NEW.
 GPGME_REVSIG_LFSEP                         NEW.
 cpp: Context::setExpire                    NEW.
 cpp: Context::startSetExpire               NEW.
 cpp: EngineInfo::Version::operator<=       NEW.
 cpp: EngineInfo::Version::operator>=       NEW.
 cpp: EngineInfo::Version::operator!=       NEW.
 cpp: StatusConsumer                        NEW.
 cpp: StatusConsumerAssuanTransaction       NEW.
 cpp: Context::cancelPendingOperationImmediately NEW.
 cpp: Context::revokeSignature              NEW.
 cpp: Context::startRevokeSignature         NEW.
 cpp: UserID::Signature::operator<          NEW.
 qt: operator<<(QDebug debug, const GpgME::Error &err) NEW.
 qt: QuickJob::startRevokeSignature         NEW.
 qt: QuickJob::result                   CHANGED: Made params 'auditLogAsHtml'
                                                and 'auditLogError' optional.

 [c=C35/A24/R0 cpp=C18/A12/R0 qt=C12/A5/R0]

 Release-info: https://dev.gnupg.org/T5131


Noteworthy changes in version 1.14.0 (2020-07-16)
-------------------------------------------------

 * New keylist mode to force the engine to return the keygrip. [#4820]

 * New export mode to export as OpenSSH public key.  [#4310]

 * New context flag "extended-edit" to enable expert key edit. [#4734]

 * Deprecate the anyway non working trustlist functions.  [#4834]

 * cpp: Add convenience API to obtain remarks. [#4734]

 * cpp: The sign key edit-interactor now supports multiple signatures
   from the same key. [#4734]

 * qt: Extended signkeyjob to handle remarks and multiple signatures.
   [#4734]

 * qt: Added job API for gpg-card.

 * qt: The logging category has been changed to gpg.qgpgme to be more
       consistent with other qt logging categories.

 * Interface changes relative to the 1.13.1 release:
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 GPGME_KEYLIST_MODE_WITH_KEYGRIP              NEW.
 GPGME_EXPORT_MODE_SSH                        NEW.
 gpgme_user_id_t                         EXTENDED: New field 'uidhash'.
 cpp: UserID::remark                          NEW.
 cpp: UserID::remarks                         NEW.
 cpp: GpgSignKeyEditInteractor::setDupeOk     NEW.
 cpp: Context::exportPublicKeys          EXTENDED: New param 'flags'.
 cpp: Context::startPublicKeyExport      EXTENDED: New param 'flags'.
 cpp: Context::ExportMode                     NEW.
 qt: SignKeyJob::setDupeOk                    NEW.
 qt: SignKeyJob::setRemark                    NEW.
 qt: GpgCardJob                               NEW.
 qt: ExportJob::setExportFlags                NEW.

 [c=C34/A23/R0 cpp=C17/A11/R0 qt=C11/A4/R0]

 Release-info: https://dev.gnupg.org/T4996


Noteworthy changes in version 1.13.1 (2019-06-13)
-------------------------------------------------

 * cpp: gpgme_set_global_flag is now wrapped.  [#4471]

 * w32: Improved handling of unicode install paths.  [#4453]

 * w32: The gpgme_io_spawn error message is now only shown once. [#4453]

 * Fixed a crash introduced in 1.13.0 when working with S/MIME. [#4556]

 * w32: Fixed format string errors introduced in 1.13.0 that could
   cause crashes.  [#4440]

 * w32: Fixed an error in the new diagnostic gpgsm support introduced
   in 1.13.0 that caused crashes in low fd scenarios.  [#4439]

 * python: Fixed a DecryptionError Exception.  [#4478]

 * python: No longer raises BadSignatures from decrypt(verify=True).
   [#4276]

 * Interface changes relative to the 1.13.0 release:
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 cpp: setGlobalFlag                         NEW.

 [c=C33/A22/R1 cpp=C16/A10/R0 qt=C10/A3/R4]

 Release-info: https://dev.gnupg.org/T4551


Noteworthy changes in version 1.13.0 (2019-03-26)
-------------------------------------------------

 * Support GPGME_AUDITLOG_DIAG for gpgsm.  [#4426]

 * New context flag "trust-model".

 * Removed support for WindowsCE and Windows ME.

 * Aligned the gpgrt-config code with our other libaries.

 * Auto-check for all installed Python versions.  [#3354]

 * Fixed generating card key in the C++ bindings.  [#4428]

 * Fixed a segv due to bad parameters in genkey.  [#4192]

 * Fixed crash if the plaintext is ignored in a CMS verify.

 * Fixed memleak on Windows.  [T4238]

 * Tweaked the Windows I/O code.

 * Fixed random crashes on Windows due to closing an arbitrary
   handle.  [#4237]

 * Fixed a segv on Windows.  [#4369]

 * Fixed test suite problems related to dtags.  [#4298]

 * Fixed bunch of python bugs.  [#4242,commit 9de1c96ac3cf]

 * Several fixes to the Common Lisp bindings.

 * Fixed minor bugs in gpgme-json.  [#4331,#4341,#4342,#4343]

 * Require trace level 8 to dump all I/O data.

 * The compiler must now support variadic macros.

 * Interface changes relative to the 1.12.0 release:
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 gpgme_set_ctx_flag               EXTENDED: New flag 'trust-model'.
 cpp: Context::create                       NEW.
 cpp: Key::isBad                            NEW.
 cpp: Subkey::isBad                         NEW.
 cpp: UserID::isBad                         NEW.
 cpp: UserID::Signature::isBad              NEW.
 cpp: GenCardKeyInteractor::setAlgo         NEW.

 [c=C33/A22/R0 cpp=C15/A9/R0 qt=C10/A3/R3]

 Release-info: https://dev.gnupg.org/T4376


Noteworthy changes in version 1.12.0 (2018-10-08)
-------------------------------------------------

 * Enhanced the JSON based interface tool gpgme-json to support Native
   Messaging as well as new Javascript code to support the browser
   site.  See lang/js/README for details.

 * Major overhaul of the Python language bindings documentation.

 * Even for old versions of gpg a missing MDC will now lead to a
   decryption failure.

 * Added context flag "auto-key-locate" to control the
   behavior of GPGME_KEYLIST_MODE_LOCATE.

 * New data function to create a data object from an estream.

 * Add more interfaces to the C++ bindings.

 * Improved error codes on decryption failure.

 * Lots of minor fixes.

 * Interface changes relative to the 1.11.1 release:
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 gpgme_data_new_from_estream                NEW.
 gpgme_decrypt_result_t           EXTENDED: New field legacy_cipher_nomdc.
 gpgme_set_ctx_flag               EXTENDED: New flag 'ignore-mdc-error'.
 GPGME_AUDITLOG_DEFAULT                     NEW.
 GPGME_AUDITLOG_DIAG                        NEW.
 gpgme_set_ctx_flag               EXTENDED: New flag 'auto-key-locate'.
 cpp: DecryptionResult::sessionKey          NEW.
 cpp: DecryptionResult::symkeyAlgo          NEW.
 cpp: DecryptionResult::isLegacyCipherNoMDC New.
 cpp: Data::rewind                          NEW.
 cpp: Context::setFlag                      NEW.
 cpp: Context::getFlag                      NEW.
 cpp: Context::createKeyEx                  NEW.

 [c=C32/A21/R0 cpp=C14/A8/R0 qt=C10/A3/R2]

 Release-info: https://dev.gnupg.org/T4109


Noteworthy changes in version 1.11.1 (2018-04-20)
-------------------------------------------------

 * Fixed build problems in the 1.11.0 release.

 * Added C++ interfaces which were planned for 1.11.0.

 * Interface changes relative to the 1.10.0 release:
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 cpp: Key::origin                     NEW.
 cpp: Key::lastUpdate                 NEW.
 cpp: UserID::origin                  NEW.
 cpp: UserID::lastUpdate              NEW.

 [c=C31/A20/R1 cpp=C13/A7/R0 qt=C10/A3/R2]


Noteworthy changes in version 1.11.0 (2018-04-18)
-------------------------------------------------

 * New encryption API to support direct key specification including
   hidden recipients option and taking keys from a file.  This also
   allows to enforce the use of a subkey.

 * New encryption flag for the new API to enforce the use of plain
   mail addresses (addr-spec).

 * The import API can now tell whether v3 keys are skipped.  These old
   and basically broken keys are not anymore supported by GnuPG 2.1.

 * The decrypt and verify API will now return the MIME flag as
   specified by RFC-4880bis.

 * The offline mode now has an effect on gpg by disabling all network
   access.  [#3831]

 * A failed OpenPGP verification how returns the fingerprint of the
   intended key if a recent gpg version was used for signature
   creation.

 * New tool gpgme-json as native messaging server for web browsers.
   As of now public key encryption and decryption is supported.
   Requires Libgpg-error 1.29.

 * New context flag "request-origin" which has an effect when used
   with GnuPG 2.2.6 or later.

 * New context flag "no-symkey-cache" which has an effect when used
   with GnuPG 2.2.7 or later.

 * New convenience constant GPGME_KEYLIST_MODE_LOCATE.

 * Improved the Python documentation.

 * Fixed a potential regression with GnuPG 2.2.6 or later.

 * Fixed a crash in the Python bindings on 32 bit platforms.  [#3892]

 * Various minor fixes.

 * Interface changes relative to the 1.10.0 release:
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 gpgme_op_encrypt_ext             NEW.
 gpgme_op_encrypt_ext_start       NEW.
 gpgme_op_encrypt_sign_ext        NEW.
 gpgme_op_encrypt_sign_ext_start  NEW.
 GPGME_ENCRYPT_WANT_ADDRESS       NEW.
 GPGME_KEYLIST_MODE_LOCATE        NEW.
 gpgme_import_result_t            EXTENDED: New field 'skipped_v3_keys'.
 gpgme_decrypt_result_t           EXTENDED: New field 'symkey_algo'.
 gpgme_decrypt_result_t           EXTENDED: New field 'is_mime'.
 gpgme_verify_result_t            EXTENDED: New field 'is_mime'.
 cpp: Key::locate                 NEW.
 cpp: Data::toString              NEW.
 cpp: ImportResult::numV3KeysSkipped  NEW.

 [c=C31/A20/R0 cpp=C12/A6/R0 qt=C10/A3/R1]


Noteworthy changes in version 1.10.0 (2017-12-12)
-------------------------------------------------

 * Now returns more specific error codes for decryption to distinguish
   between bad passphrase, user canceled, and no secret key.

 * Now returns key origin information if available.

 * Added context flag "auto-key-retrieve" to selectively enable the
   corresponding gpg option.

 * Added flag is_de_vs to decryption and verify results.

 * py: Use SEEK_SET as default for data.seek.

 * cpp: Various new APIs.

 * Reduced spawn overhead on Linux again.  Added new configure option
   --disable-linux-getdents to disable this feature for very old
   Linux versions.

 * Improved the Python bindings build system.

 * Made the test suite less fragile.

 * Interface changes relative to the 1.9.0 release:
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 gpgme_decrypt_result_t      EXTENDED: New field 'is_de_vs'.
 gpgme_signature_t           EXTENDED: New field 'is_de_vs'.
 gpgme_keyorg_t              NEW.
 gpgme_op_delete_ext         NEW.
 gpgme_op_delete_ext_start   NEW.
 GPGME_DELETE_ALLOW_SECRET   NEW.
 GPGME_DELETE_FORCE          NEW.
 gpgme_op_conf_dir           NEW.
 gpgme_set_ctx_flag          EXTENDED: New flag 'auto-key-retrieve'.
 cpp: DecryptionResult::isDeVs         NEW.
 cpp: Signature::isDeVs                NEW.
 cpp: EngineInfo::Version::operator>   NEW.
 cpp: Context::createKey               NEW.
 cpp: Context::startCreateKey          NEW.
 cpp: Context::createSubkey            NEW.
 cpp: Context::startCreateSubkey       NEW.
 qt: QuickJob                          NEW.
 py: DecryptResult           EXTENDED: New boolean field 'is_de_vs'.
 py: Signature               EXTENDED: New boolean field 'is_de_vs'.
 py: GpgError                EXTENDED: Partial results in 'results'.

 [c=C30/A19/R0 cpp=C11/A5/R0 qt=C10/A3/R0]


Noteworthy changes in version 1.9.0 (2017-03-28)
------------------------------------------------

 * Clarified meaning of the 'expire' parameter of gpgme_op_createkey
   and gpgme_op_createsubkey.  New flag to force a key without an
   expiration date.

 * New function gpgme_op_keylist_from_data_start to list keys from
   data objects without importing them.

 * New function gpgme_op_set_uid_flag to flag a key as primary.

 * New function gpgme_op_decrypt_ext to run decryption with special
   flags.  This can for example be used to unwrap keys (remove only
   the encryption layer).

 * New encryption flags to wrap a key (adding an encryption layer to
   an OpenPGP message) or to create anonymously encrypted messages.

 * Support for adduid and revuid operations in the C++ bindings.

 * Support for smartcard key generation in the C++ bindings.

 * Several new functions for the Python binding.

 * Many smaller bug fixes.

 * Interface changes relative to the 1.8.0 release:
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 gpgme_op_createkey          CHANGED: Meaning of 'expire' parameter.
 gpgme_op_createsubkey       CHANGED: Meaning of 'expire' parameter.
 GPGME_CREATE_NOEXPIRE       NEW.
 gpgme_key_t                 EXTENDED: New field 'origin'.
 gpgme_key_t                 EXTENDED: New field 'last_update'.
 gpgme_subkey_t              EXTENDED: New field 'is_de_vs'.
 gpgme_user_id_t             EXTENDED: New field 'origin'.
 gpgme_user_id_t             EXTENDED: New field 'last_update'.
 gpgme_op_keylist_from_data_start NEW.
 gpgme_op_set_uid_flag_start      NEW.
 gpgme_op_set_uid_flag            NEW.
 gpgme_op_decrypt_ext_start       NEW.
 gpgme_op_decrypt_ext             NEW.
 GPGME_ENCRYPT_THROW_KEYIDS       NEW.
 GPGME_ENCRYPT_WRAP               NEW.
 GPGME_DECRYPT_VERIFY             NEW.
 GPGME_DECRYPT_UNWRAP             NEW.
 gpgme_data_rewind                UN-DEPRECATE.
 cpp: Context::revUid(const Key&, const char*)      NEW.
 cpp: Context::startRevUid(const Key&, const char*) NEW.
 cpp: Context::addUid(const Key&, const char*)      NEW.
 cpp: Context::startAddUid(const Key&, const char*) NEW.
 cpp: Key::UserID::revoke()                         NEW.
 cpp: Key::addUid()                                 NEW.
 cpp: Key::isDeVs                                   NEW.
 cpp: GpgGenCardKeyInteractor                       NEW.
 cpp: Subkey::keyGrip                               NEW.
 cpp: Subkey::isDeVs                                NEW.
 cpp: Data::toKeys                                  NEW.
 cpp: Context::setDecryptFlags                      NEW.
 cpp: Context::decrypt                         EXTENDED: Flags added.
 cpp: Context::startDecrypt                    EXTENDED: Flags added.
 cpp: Context::decryptAndVerify                EXTENDED: Flags added.
 cpp: Context::startCombinedDecryptionAndVerification EXTENDED: Flags.
 cpp: Context::encryptFlags                    EXTENDED: New flags.
 qt: CryptoConfig::stringValueList()                NEW.
 py: Context.__init__        EXTENDED: New keyword arg home_dir.
 py: Context.home_dir        NEW.
 py: Context.keylist         EXTENDED: New keyword arg mode.
 py: Context.keylist         EXTENDED: New keyword arg source.
 py: Context.create_key      NEW.
 py: Context.create_subkey   NEW.
 py: Context.key_add_uid     NEW.
 py: Context.key_revoke_uid  NEW.
 py: Context.key_sign        NEW.
 py: Context.key_tofu_policy NEW.
 py: core.pubkey_algo_string NEW.
 py: core.addrspec_from_uid  NEW.

 [c=C29/A18/R0 cpp=C10/A4/R0 qt=C9/A2/R0]


Noteworthy changes in version 1.8.0 (2016-11-16)
------------------------------------------------

 * The module of the Python bindings has been renamed to 'gpg'.

 * New interface to query current software versions.

 * New feature to use gpg's --{show,override}session-key options.

 * New interface to set the sender of a mail.

 * qt: Added Distinguished Name parser from libkleo

 * The --homedir option is now used with recent gpgconf versions.

 * On 64 bit Windows systems gpgconf is now properly located.

 * The internal locking functions have been replaced by libgpg-error
   locking functions.

 * Interface changes relative to the 1.7.1 release:
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 gpgme_set_sender                NEW.
 gpgme_get_sender                NEW.
 gpgme_op_query_swdb             NEW.
 gpgme_op_query_swdb_result      NEW.
 gpgme_query_swdb_result_t       NEW.
 gpgme_get_ctx_flag              NEW.
 gpgme_decrypt_result_t          EXTENDED: New field session_key.
 qt: DN                          NEW.
 qt: DN::Attribute               NEW.
 qt: Job::context(Job*)          NEW.
 cpp: EngineInfo::Version::Version(const char*) NEW.
 cpp: EngineInfo::Version::Version()            NEW.
 cpp: SwdbResult                                NEW.
 cpp: Context::setSender(const char*)           NEW.
 cpp: Context::getSender()                      NEW.

 [c=C28/A17/R0 cpp=C9/A3/R0 qt=C8/A1/R0]


Noteworthy changes in version 1.7.1 (2016-10-18)
------------------------------------------------

 * Fixed problems with the new language bindings.

 * New helper function gpgme_addrspec_from_uid.

 * Use option --exit-on-status-write-error with newer gpg versions.

 * qt: Missed API from the Qt Binding inclusion has
   been added again.

 * qt: abstractimportjob.h is now installed to that
   ImportJobs can be used again.

 * qt: Fixed spelling error in API (startReceive).

 * Interface changes relative to the 1.7.0 release:
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 gpgme_addrspec_from_uid         NEW.
 qt: WksPublishJob::startRecieve RENAMED to ::startReceive.
 qt: MultiDeleteJob              NEW.
 qt: AbstractImportJob           NEW.
 qt: SpecialJob                  NEW.
 cpp: Signature::key(bool, bool)              NEW.
 cpp: UserID::addrSpecFromString(const char*) NEW.
 cpp: UserID::addrSpec()                      NEW.

 [c=C27/A16/R0 cpp=C8/A2/R0 qt=C7/A0/R0]


Noteworthy changes in version 1.7.0 (2016-09-21)
------------------------------------------------

 * New language bindings for Python 2 and 3.

 * New language Bindings for C++ and the Qt-Framework API.

 * New functions gpgme_op_createkey and gpgme_op_createsubkey to make
   key creation easier (requires GnuPG 2.1).

 * New functions gpgme_op_adduid and gpgme_op_revuid to make user id
   management easier (requires GnuPG 2.1).

 * New function gpgme_op_keysign to make key signing easier (requires
   GnuPG 2.1).

 * New function gpgme_op_interact to replace the now deprecated
   functions gpgme_op_edit and gpgme_op_card_edit.

 * New function gpgme_pubkey_algo_string to convert a public key
   algorithm into a GnuPG 2.1 style string.

 * Support for GnuPG 2.1's TOFU trust model.

 * Notation flags are now correctly set on verify.

 * New global flag "require-gnupg" to set a minimal gnupg version.

 * More supported items in gpgme_get_dirinfo.

 * New function gpgme_data_set_flag and flag "size-hint".

 * New function gpgme_set_ctx_flag and flags "full-status" and
   "raw-description".

 * Improved gpgme_data_identify to distinguish more file types.

 * New flag GPGME_ENCRYPT_SYMMETRIC for gpgme_op_encrypt to allow
   mixed public key and symmetric encryption.

 * New field KEYGRIP in gpgme_subkey_t.  New fields FPR in gpgme_key_t.

 * New flag GPGME_DATA_ENCODING_MIME to declare that the encrypted or
   signed data is a valid MIME part.  This is to support future GnuPG
   versions.

 * Interface changes relative to the 1.6.0 release:
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 gpgme_pubkey_algo_string       NEW.
 GPGME_PK_EDDSA                 NEW.
 gpgme_set_ctx_flag             NEW.
 gpgme_data_set_flag            NEW.
 gpgme_op_createkey             NEW.
 gpgme_op_createkey_start       NEW.
 gpgme_op_createsubkey          NEW.
 gpgme_op_createsubkey_start    NEW.
 gpgme_op_adduid_start          NEW.
 gpgme_op_adduid                NEW.
 gpgme_op_revuid_start          NEW.
 gpgme_op_revuid                NEW.
 gpgme_op_keysign_start         NEW.
 gpgme_op_keysign               NEW.
 gpgme_op_tofu_policy_start     NEW.
 gpgme_op_tofu_policy           NEW.
 gpgme_op_interact_start        NEW.
 gpgme_op_interact              NEW.
 gpgme_interact_cb_t            NEW.
 gpgme_op_edit_start            DEPRECATED.
 gpgme_op_edit                  DEPRECATED.
 gpgme_op_card_edit_start       DEPRECATED.
 gpgme_op_card_edit             DEPRECATED.
 gpgme_edit_cb_t                DEPRECATED.
 gpgme_status_code_t            DEPRECATED.
 gpgme_genkey_result_t          EXTENDED: New fields pubkey and seckey.
 gpgme_signature_t              EXTENDED: New field key.
 gpgme_key_t                    EXTENDED: New field fpr.
 gpgme_subkey_t                 EXTENDED: New field keygrip.
 gpgme_user_id_t                EXTENDED: New field tofu.
 gpgme_tofu_policy_t            NEW.
 gpgme_tofu_info_t              NEW.
 GPGME_STATUS_KEY_CONSIDERED    NEW.
 GPGME_STATUS_TOFU_USER         NEW.
 GPGME_STATUS_TOFU_STATS        NEW.
 GPGME_STATUS_TOFU_STATS_LONG   NEW.
 GPGME_STATUS_NOTATION_FLAGS    NEW.
 GPGME_KEYLIST_MODE_WITH_TOFU   NEW.
 GPGME_DATA_TYPE_PGP_ENCRYPTED  NEW.
 GPGME_DATA_TYPE_PGP_SIGNATURE  NEW.
 GPGME_DATA_ENCODING_MIME       NEW.
 GPGME_ENCRYPT_SYMMETRIC        NEW.
 GPGME_CREATE_SIGN              NEW.
 GPGME_CREATE_ENCR              NEW.
 GPGME_CREATE_CERT              NEW.
 GPGME_CREATE_AUTH              NEW.
 GPGME_CREATE_NOPASSWD          NEW.
 GPGME_CREATE_SELFSIGNED        NEW.
 GPGME_CREATE_NOSTORE           NEW.
 GPGME_CREATE_WANTPUB           NEW.
 GPGME_CREATE_WANTSEC           NEW.
 GPGME_CREATE_FORCE             NEW.
 GPGME_KEYSIGN_LOCAL            NEW.
 GPGME_KEYSIGN_LFSEP            NEW.
 GPGME_INTERACT_CARD            NEW.

 [c=C26/A15/R0 cpp=C6/A0/R1 qt=C6/A0/R1]


Noteworthy changes in version 1.6.0 (2015-08-26) [C25/A14/R0]
------------------------------------------------

 * Added gpgme_set_offline to do a key listinging w/o requiring CRL.

 * Added gpgme_set_status_cb to allow a user to see some status
   messages.

 * Added an export mode for secret keys.

 * More precise error codes are returned if GnuPG >= 2.1.8 is used.

 * The passphrase handler for the loopback mode has been improved and may
   also be used with genkey.

 * [w32] The standard GnuPG 2.1 install directory is now searched for
   gpgconf.exe before a registry specified directory and the Gpg4win
   install directory.

 * [w32] gpgme-w32spawn.exe will now only be searched in the gpgme DLL
   directory.

 * Interface changes relative to the 1.5.1 release:
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 gpgme_set_offline              NEW.
 gpgme_get_offline              NEW.
 gpgme_set_status_cb            NEW.
 gpgme_get_status_cb            NEW.
 GPGME_EXPORT_MODE_SECRET       NEW
 GPGME_EXPORT_MODE_RAW          NEW.
 GPGME_EXPORT_MODE_PKCS12       NEW.


Noteworthy changes in version 1.5.5 (2015-06-08) [C24/A13/R4]
------------------------------------------------

 * Fixed crash in key listings for user ids with a backslash.

 * Fixed regression for GPGSM use with GnuPG < 2.1.

 * Properly set signature summary for revoked OpenPGP keys.


Noteworthy changes in version 1.5.4 (2015-04-13) [C24/A13/R3]
------------------------------------------------

 * Fixed a possible crash in the debug code.

 * Fixed building for Windows with newer versions of Mingw.


Noteworthy changes in version 1.5.3 (2014-12-11) [C24/A13/R2]
-------------------------------------------------------------

 * The export key functions do now return an error if used with the
   latest GnuPG version.


Noteworthy changes in version 1.5.2 (2014-11-21) [C24/A13/R1]
-------------------------------------------------------------

 * gpgme-tool is now installed.

 * Fix external listing for modern keyservers.

 * Minor other fixes.


Noteworthy changes in version 1.5.1 (2014-07-30) [C24/A13/R0]
-------------------------------------------------------------

 * Fixed possible overflow in gpgsm and uiserver engines.
   [CVE-2014-3564]

 * Added support for GnuPG 2.1's --with-secret option.

 * Interface changes relative to the 1.5.0 release:
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 GPGME_KEYLIST_MODE_WITH_SECRET NEW.


Noteworthy changes in version 1.5.0 (2014-05-21) [C23/A12/R0]
-------------------------------------------------------------

 * On Unices the engine file names are not not anymore hardwired but
   located via the envvar PATH.  All options to set the name of the
   engines for the configure run are removed.

 * If GPGME finds the gpgconf binary it defaults to using gpg2 or
   whatever gpgconf tells as name for the OpenPGP engine.  If gpgconf
   is not found, GPGME looks for an engine named "gpg".

 * New feature to use the gpgme I/O subsystem to run arbitrary
   commands.

 * New flag to use encryption without the default compression step.

 * New function to access "gpg-conf --list-dirs"

 * New configure option --enable-fixed-path for use by Android.

 * Support ECC algorithms.

 * Interface changes relative to the 1.4.3 release:
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 gpgme_get_dirinfo              NEW.
 gpgme_op_spawn_start           NEW.
 gpgme_op_spawn                 NEW.
 GPGME_PROTOCOL_SPAWN           NEW.
 GPGME_SPAWN_DETACHED           NEW.
 GPGME_SPAWN_ALLOW_SET_FG       NEW.
 GPGME_ENCRYPT_NO_COMPRESS      NEW.
 GPGME_PK_ECC                   NEW.
 GPGME_MD_SHA224                NEW.
 gpgme_subkey_t                 EXTENDED: New field curve.
 GPGME_STATUS_PLAINTEXT_LENGTH  NEW.
 GPGME_STATUS_MOUNTPOINT        NEW.
 GPGME_STATUS_PINENTRY_LAUNCHED NEW.
 GPGME_STATUS_ATTRIBUTE         NEW.
 GPGME_STATUS_BEGIN_SIGNING     NEW.
 GPGME_STATUS_KEY_NOT_CREATED   NEW.


Noteworthy changes in version 1.4.3 (2013-08-12) [C22/A11/R0]
-------------------------------------------------------------

 * The default engine names are now taken from the output of gpgconf.
   If gpgconf is not found the use of gpg 1 is assumed.

 * Under Windows the default engines names are first searched in the
   installation directory of the gpgme DLL.

 * New function gpgme_data_identify to detect the type of a message.

 * Interface changes relative to the 1.4.2 release:
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 gpgme_signers_count            NEW.
 gpgme_data_type_t              NEW.
 gpgme_data_identify            NEW.


Noteworthy changes in version 1.4.2 (2013-05-28) [C21/A10/R0]
-------------------------------------------------------------

 * Allow symmetric encryption with gpgme_op_encrypt_sign.

 * Fixed mismatching off_t definitions on Windows.

 * Interface changes relative to the 1.4.1 release:
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 gpgme_off_t                    NEW.
 gpgme_size_t                   NEW.
 GPGME_PROTOCOL_OPENPGP         NEW alias.


Noteworthy changes in version 1.4.1 (2013-05-01) [C20/A9/R1]
------------------------------------------------------------

 * Fixed reading of gpg.conf files with excessive use of the group
   option.

 * Fixed building with the i686-w64-mingw32 toolchain.

 * Disabled FD passing by default for Apple.


Noteworthy changes in version 1.4.0 (2013-02-26) [C20/A9/R0]
------------------------------------------------------------

 * New function gpgme_set_global_flag to help debugging on Android.

 * New function gpgme_io_writen as a convenience wrapper around
   gpgme_io_write.

 * New functions to support the pinentry mode feature of GnuPG 2.1.

 * New macro GPGME_VERSION_NUMBER to allow supporting different API
   versions without the need for a configure test.

 * Several improvements for gpgme-tool.

 * Better logging of the common "invalid engine" error code.

 * Support for FD passing is now enabled by default.  The configure
   option --disable-fd-passing may be used to disable this.

 * Interface changes relative to the 1.3.1 release:
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 GPGME_VERSION_NUMBER           NEW.
 gpgme_io_writen                NEW.
 gpgme_set_global_flag          NEW.
 gpgme_set_pinentry_mode        NEW.
 gpgme_get_pinentry_mode        NEW.
 gpgme_pinentry_mode_t          NEW.
 GPGME_PINENTRY_MODE_DEFAULT    NEW.
 GPGME_PINENTRY_MODE_ASK        NEW.
 GPGME_PINENTRY_MODE_CANCEL     NEW.
 GPGME_PINENTRY_MODE_ERROR      NEW.
 GPGME_PINENTRY_MODE_LOOPBACK   NEW.


Noteworthy changes in version 1.3.2 (2012-05-02)
------------------------------------------------

 * Remove support for libgpgme-pth.  As far as we know, this was never used,
   and GnuPG is going to use our own npth in the future.

 * Fix signature summary information for a missing X.509 key.

 * Fix parsing of dates >= year 2038.


Noteworthy changes in version 1.3.1 (2011-06-16)
------------------------------------------------

 * Ported to Windows CE.

 * Detect GPG versions not supporting ---passwd.

 * Interface changes relative to the 1.3.0 release:
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 GPGME_EXPORT_MODE_MINIMAL      NEW
 GPGME_STATUS_SUCCESS		NEW
 gpgme_err_code_from_syserror   NEW
 gpgme_err_set_errno            NEW
 gpgme_error_from_errno		CHANGED: Return gpgme_error_t (compatible type).
 gpgme_error_from_syserror      NEW
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Noteworthy changes in version 1.3.0 (2010-01-11)
------------------------------------------------

 * GPGME does not come with an internal libassuan version anymore.
   The external libassuan 1.1.0 release or later is required.  For
   application programmers on systems that can resolve inter-library
   dependencies at runtime, this is a transparent change.

 * New engine GPGME_PROTOCOL_G13 to support the new g13 tool.

 * New engine GPGME_PROTOCOL_UISERVER to support UI Servers.

 * New API to change the passphrase of a key.

 * Interface changes relative to the 1.2.0 release:
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 GPGME_STATUS_INV_SGNR    NEW.
 GPGME_STATUS_NO_SGNR     NEW.
 GPGME_PROTOCOL_G13	  NEW.
 gpgme_op_g13_mount	  NEW.
 gpgme_g13_result_t	  NEW.
 GPGME_PK_ECDSA           NEW.
 GPGME_PK_ECDH            NEW.
 gpgme_op_passwd_start    NEW.
 gpgme_op_passwd          NEW.
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Noteworthy changes in version 1.2.0 (2009-06-18)
------------------------------------------------

 * New encryption flag GPGME_ENCRYPT_NO_ENCRYPT_TO to disable default
   recipients.

 * gpgme_new will fail if gpgme_check_version was not called, or a
   selftest failed (for example, if -mms-bitfields was not used on
   MingW32 targets).

 * New functions gpgme_io_read and gpgme_io_write for use with
   gpgme_passphrase_cb_t and gpgme_edit_cb_t functions.

 * New functions gpgme_result_ref and gpgme_result_unref to detach
   result structures from a context.

 * New functions gpgme_op_export_keys_start and gpgme_op_export_keys
   that allow to specify exported keys through gpgme_key_t objects
   instead of patterns.

 * New mode of operation gpgme_export_mode_t that allows exporting
   external keys.

 * Interface changes relative to the 1.1.7 release:
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 GPGME_KEYLIST_MODE_EPHEMERAL   NEW.
 GPGME_PROTOCOL_ASSUAN          NEW.
 gpgme_assuan_data_cb_t         NEW.
 gpgme_assuan_inquire_cb_t      NEW.
 gpgme_assuan_status_cb_t       NEW.
 gpgme_op_assuan_transact_start NEW.
 gpgme_op_assuan_transact       NEW.
 gpgme_op_assuan_result         NEW.
 gpgme_op_import_keys           NEW.
 gpgme_op_import_keys_start     NEW.
 gpgme_subkey_t                 EXTENDED: New fields is_cardkey, card_number.
 GPGME_ENCRYPT_NO_ENCRYPT_TO    NEW.
 gpgme_check_version            CHANGED: Is now a macro.
 gpgme_new                      EXTENDED: More failure codes.
 gpgme_io_read                  NEW.
 gpgme_io_write                 NEW.
 gpgme_result_ref               NEW.
 gpgme_result_unref             NEW.
 gpgme_export_mode_t            NEW.
 gpgme_export_ext_start         EXTENDED: Arg RESERVED is now a MODE flag.
 gpgme_op_export                EXTENDED: Arg RESERVED is now a MODE flag.
 gpgme_op_export_ext_start      EXTENDED: Arg RESERVED is now a MODE flag.
 gpgme_op_export_ext            EXTENDED: Arg RESERVED is now a MODE flag.
 gpgme_op_export_keys_start     NEW.
 gpgme_op_export_keys           NEW.
 GPGME_DATA_ENCODING_URL        NEW.
 GPGME_DATA_ENCODING_URL0       NEW.
 GPGME_DATA_ENCODING_URLESC     NEW.
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Noteworthy changes in version 1.1.8 (2008-12-08)
------------------------------------------------

 * SIGPIPE is now again ignored as described in the manual.  Fixes
   regression introduced with 1.1.6.


Noteworthy changes in version 1.1.7 (2008-10-17)
------------------------------------------------

 * Using GPGME_KEYLIST_MODE_LOCAL combined with
   GPGME_KEYLIST_MODE_EXTERN is now supported; it uses the
   --locate-keys feature of gpg (>= 2.0.10).

 * The encoding of gpgme_data_t objects can affect the output encoding
   of export, sign and encrypt operations now (the same operations
   that are also affected by the ASCII mode switch).  We believe this
   change in the ABI is innocent enough not to break existing
   applications (it only affects the S/MIME backend on certain
   operations).

 * The reference manual now includes the specification of "The GnuPG
   UI Server protocol".

 * A new function gpgme_cancel_async can be used to asynchronously
   cancel any pending operation at any time, from any thread.

 * Interface changes relative to the 1.1.6 release:
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gpgme_op_encrypt		CHANGED: Output encoding can affect result.
gpgme_op_encrypt_start		CHANGED: Output encoding can affect result.
gpgme_op_encrypt_sign		CHANGED: Output encoding can affect result.
gpgme_op_encrypt_sign_start	CHANGED: Output encoding can affect result.
gpgme_op_sign			CHANGED: Output encoding can affect result.
gpgme_op_sign_start		CHANGED: Output encoding can affect result.
gpgme_op_export			CHANGED: Output encoding can affect result.
gpgme_op_export_start		CHANGED: Output encoding can affect result.
gpgme_op_export_ext		CHANGED: Output encoding can affect result.
gpgme_op_export_ext_start	CHANGED: Output encoding can affect result.
gpgme_cancel_async		NEW
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Noteworthy changes in version 1.1.6 (2008-01-04)
------------------------------------------------

 * Bug fixes for for W32.

 * A new, experimental (and thus undocumented and potentially
   unstable) interface for accessing gpg-conf through GPGME has been
   added.

 * Interface changes relative to the 1.1.1 release:
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 gpgme_signature_t               EXTENDED: New field chain_model.
 gpgme_op_getauditlog_start      NEW.
 gpgme_op_getauditlog            NEW.
 GPGME_AUDITLOG_HTML             NEW.
 GPGME_AUDITLOG_WITH_HELP        NEW.
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Noteworthy changes in version 1.1.5 (2007-07-09)
------------------------------------------------

 * Bug and portability fixes (mainly for W32).


Noteworthy changes in version 1.1.4 (2007-03-05)
------------------------------------------------

 * Detect and bail out on double plaintext messages.  This is required
   so that applications can properly detect the signed parts of a
   message.  Actual there is now a double protection as GnuPG 1.4.7
   will detect this case too.


Noteworthy changes in version 1.1.3 (2007-01-29)
------------------------------------------------

 * Fixed a memory leak in gpgme_data_release_and_get_mem.

 * Fixed a bug in Windows command line quoting.


Noteworthy changes in version 1.1.2 (2006-03-02)
------------------------------------------------

 * Fixed a bug in the W32 glib backend.


Noteworthy changes in version 1.1.1 (2006-02-23)
------------------------------------------------

 * Fixed a bug in that the fingerprints of subkeys are not available.

 * Clarified usage of the SECRET flag in key listings.  It is now
   reset for stub keys.

 * Reading signature notations and policy URLs on key signatures is
   supported.  They can be found in the new field notations of the
   gpgme_key_sig_t structure.  This has to be enabled with the keylist
   mode flag GPGME_KEYLIST_MODE_SIG_NOTATIONS.

 * A new gpgme_free() function solves the problem of using different
   allocators in a single program.  This function should now be used
   instead calling free() to release the buffer returned by
   gpgme_data_release_and_get_mem.  It is recommended that you always
   do this, but it is only necessary on certain platforms, so backwards
   compatibility is provided.  In other words: If free() worked for
   you before, it will keep working.

 * New status codes GPGME_PKA_TRUST_GOOD and GPGME_PKA_TRUST_BAD.
   They are analyzed by the verify handlers and made available in the
   new PKA_TRUST and PKA_ADDRESS fields of the signature result structure.

 * Interface changes relative to the 1.1.0 release:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gpgme_key_sig_t			EXTENDED: New field notations.
GPGME_KEYLIST_MODE_SIG_NOTATIONS NEW
gpgme_free			NEW
GPGME_STATUS_PKA_TRUST_BAD      NEW
GPGME_STATUS_PKA_TRUST_GOOD     NEW
gpgme_signature_t               EXTENDED: New field pka_trust.
gpgme_signature_t               EXTENDED: New field pka_address.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Noteworthy changes in version 1.1.0 (2005-10-01)
------------------------------------------------

 * You can now configure the backend engine file name and home
   directory to be used, as default and per context.

 * Information about the recipients of an encrypted text is now
   available at decryption time.

 * New status GPGME_STATUS_PLAINTEXT.  This is analyzed by the decrypt
   and verify handlers, the information about the plaintext filename,
   if available is made available in the new field file_name of the
   respective result structure.

 * The code for "automagically detecting the thread library" has been
   removed from libgpgme.  It is deprecated since version 0.4.3.
   Since then, you had to link against libgpgme-pthread for
   applications using pthread and libgpgme-pth for applications using
   GNU Pth.

   The code was removed because it caused compilation problems on
   systems where the pthread.h header from GNU Pth is available in
   addition to the system header (FreeBSD 6 and later for example).

 * "./autogen.sh --build-w32" does now build gpgme.dll.

 * [W32] The environment variable GPGME_DEBUG now uses a semicolon as
   delimiter.  The standard install directory is used when locating
   gpg or gpgsm before finally falling back to the hardwired name.

 * There is a new flag for keys and subkeys, is_qualified, which
   indicates if a key can be used for qualified signatures according
   to local government regulations.

 * You can associate a filename with a data object using the new
   function gpgme_data_set_file_name().  This filename will be stored
   in the output when encrypting or signing the data and will be
   returned when decrypting or verifying the output data.

 * You can now set notation data at signature creation with the new
   function gpgme_sig_notation_add().

 * Interface changes relative to the 1.0.3 release:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gpgme_set_engine_info		NEW
gpgme_ctx_get_engine_info	NEW
gpgme_ctx_set_engine_info	NEW
gpgme_recipient_t		NEW
gpgme_decrypt_result_t		EXTENDED: New field recipients.
gpgme_verify_result_t		EXTENDED: New fields pubkey_algo, hash_algo.
gpgme_decrypt_result_t		EXTENDED: New field plaintext_filename.
gpgme_verify_result_t		EXTENDED: New field plaintext_filename.
GPGME_STATUS_PLAINTEXT		NEW
gpgme_key_t			EXTENDED: New field is_qualified.
gpgme_subkey_t			EXTENDED: New field is_qualified.
gpgme_data_get_file_name	NEW
gpgme_data_set_file_name	NEW
gpgme_sig_notation_flags_t	NEW
GPGME_SIG_NOTATION_HUMAN_READABLE NEW
GPGME_SIG_NOTATAION_CRITICAL	NEW
gpgme_sig_notation_clear	NEW
gpgme_sig_notation_add		NEW
gpgme_sig_notation_get		NEW
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Noteworthy changes in version 1.0.3 (2005-06-20)
------------------------------------------------

 * Previousy, GPGME would use a default "include certs" of 1.  This
   has been changed.  Now GPGME will use the crypto backend engines
   default unless you set the value with gpgme_set_include_certs()
   explicitly.  A new macro GPGME_INCLUDE_CERTS_DEFAULT can be used
   as a value to explicitly request the new default behaviour.

   Because the default changes, this is a slight change of the API
   semantics.  We consider it to be a bug fix.

 * A bug which made GPGME hang has been fixed.  If you have
   experienced hanging before, please try out this version and let me
   know if you still experience hanging problems.

 * Interface changes relative to the 0.9.0 release:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gpgme_set_include_certs		CHANGED DEFAULT
GPGME_INCLUDE_CERTS_DEFAULT	NEW
GPGME_STATUS_SIG_SUBPACKET	NEW
GPGME_STATUS_NEED_PASSPHRASE_PIN NEW
GPGME_STATUS_SC_OP_FAILURE	NEW
GPGME_STATUS_SC_OP_SUCCESS	NEW
GPGME_STATUS_CARDCTRL		NEW
GPGME_STATUS_BACKUP_KEY_CREATED	NEW
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Noteworthy changes in version 1.0.2 (2004-12-28)
------------------------------------------------

 * Changed the license of the library to the GNU Lesser General Public
   License (LGPL), version 2.1 or later.


Noteworthy changes in version 1.0.1 (2004-10-22)
------------------------------------------------

 * Only bug fixes.


Noteworthy changes in version 1.0.0 (2004-09-30)
------------------------------------------------

 * Version 1.0.0!  We are proud to present you with a thoroughly
   tested and stable version of the GPGME library.  A big Thank You!
   to all the people who made this possible.

   The development will be branched into a stable 1.x.y series and the
   head.

 * The gpgme.m4 macro supports checking the API version.  Just prepend
   it to the required version string, separated by a colon.  For
   example, this release has the version "1:1.0.0".  The last release
   to which this version is (mostly) ABI compatible is "1:0.4.2",
   which is the default required version.


Noteworthy changes in version 0.9.0 (2004-06-08)
------------------------------------------------

 * The type gpgme_key_t has now a new field keylist_mode that contains
   the keylist mode that was active at the time the key was retrieved.

 * The type gpgme_decrypt_result_t has a new field "wrong_key_usage"
   that contains a flag indicating that the key should not have been
   used for encryption.

 * Verifying a signature of a revoked key gives the correct result now
   (GPG_ERR_CERT_REVOKED error code).

 * Clarified that the error code GPG_ERR_NO_DATA from the decrypt &
   verify operations still allows you to look at the signature
   verification result.

 * Clarified that patterns in keylisting operations have an upper
   limit, and thus are not suited to list many keys at once by their
   fingerprint.  Also improve the error message if the pattern is too
   long for the CMS protocol to handle.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gpgme_key_t			EXTENDED: New field keylist_mode.
gpgme_decrypt_result_t		EXTENDED: New field wrong_key_usage.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Noteworthy changes in version 0.4.7 (2004-04-29)
------------------------------------------------

 * Correctly initialize the fields expired, revoked, invalid, and
   disabled in the gpgme_key_t structures.

 * A bug fix: The flag wrong_key_usage of gpgme_signature_t was
   accidentally of type int instead unsigned int.

 * Interface changes relative to the 0.4.5 release:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gpgme_signature_t		CHANGED: wrong_key_usage is unsigned int now.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Noteworthy changes in version 0.4.6 (2004-04-06)
------------------------------------------------

 * Bug fixes


Noteworthy changes in version 0.4.5 (2004-03-07)
------------------------------------------------

 * GPGME is now compiled with LFS (large file support) by default.
   This means that _all_ programs using GPGME must be compiled with
   LFS support enabled by default.  You can do this easily with
   autoconf, by using the AC_SYS_LARGEFILE macro.  Or you can do this
   without autoconf by defining the preprocessor symbol
   _FILE_OFFSET_BITS to 64 (by passing the -D_FILE_OFFSET_BITS=64 to
   the C compiler command line, or by defining this preprocessor
   symbol before including any system header files).  For more
   details, read the section on LFS in the manual.

   Up to now, it was undocumented that GPGME was not using LFS.
   But the public interfaces use off_t, and file descriptors are
   exchanged between the application and GPGME.  This was an oversight,
   and bound to cause troubles in the future.

   Writing GPGME as a dual mode library that seamlessly supports LFS
   while keeping backwards compatibility is possible, but does not
   solve the problem: Many applications already expect GPGME to have
   LFS (they are compiled with off_t being a 64bit value).  This is true
   in particular for the popular Gtk+ and Qt programs.

   So, although this is an ABI (but not an API) break, we will not
   change the library version to reflect that.  Because the interfaces
   affected are probably not used yet in any GPGME 0.4 based
   application, we don't expect any real failures from this change.
   In fact, applications already using LFS will have some subtle bugs
   fixed.

   However, if you encounter an application using GPGME 0.4.x that
   does _not_ use LFS by default (off_t is a 32bit value), _and_
   uses at least one of the functions gpgme_data_seek,
   gpgme_data_new_from_filepart, or a gpgme_data_seek_cb_t with
   gpgme_data_new_from_cbs, then indeed this library will be ABI
   incompatible with the program.  As said above, we don't believe
   such a program exists.  If we are in error, then you have two
   options: As a quick hack, you can configure GPGME with the
   --disable-largefile option.  This will revert the change, and GPGME
   will not use LFS.  However, GPGME will be incompatible with
   programs that expect GPGME to use LFS.  All applications are
   required to use LFS when using GPGME, so this is only good as a
   temporary local work-around.

   The other option is to change the versioning of the library and
   recompile all applications.  We have reserved a special version of
   the library for that, so you can do that without expecting a
   version clash in the future.  Furthermore, everyone who does this
   will agree on the version to use (this is important for
   distribution makers).  Read the comment in configure.ac (before
   LIBGPGME_LT_AGE) if you want to do this.  Please don't do this
   blindly: As stated above, we think it is unlikely this measure is
   needed.  Still, it is there if necessary.  If in doubt, contact us
   and we will give our advise for your specific situation.

 * New key listing mode GPGME_KEYLIST_MODE_VALIDATE for validation of
   the listed keys.

 * New interface gpgme_cancel() that can be used to cancel
   asynchronous operations.

 * Interface changes relative to the 0.4.4 release:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gpgme_data_seek_cb_t		CHANGED: off_t is now a largefile type.
gpgme_data_seek			CHANGED: off_t is now a largefile type.
gpgme_data_new_from_filepart	CHANGED: off_t is now a largefile type.
GPGME_KEYLIST_MODE_VALIDATE     NEW
gpgme_cancel			NEW
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Noteworthy changes in version 0.4.4 (2004-01-12)
------------------------------------------------

 * The member "class" in gpgme_key_sig_t and gpgme_new_signature_t has
   been renamed to "sig_class", to avoid clash with C++ compilers.  In
   the C API, the old name "class" has been preserved for backwards
   compatibility, but is deprecated.

 * Interface changes relative to the 0.4.3 release:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gpgme_key_sig_t			CHANGED: class deprecated, use new sig_class.
gpgme_new_signature_t		CHANGED: class deprecated, use new sig_class.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Noteworthy changes in version 0.4.3 (2003-10-06)
------------------------------------------------

 * libgpgme should not be used for threaded programs anymore.  This
   never worked reliably in all cases, because you had to
   be careful about the linking order and libtool wouldn't do that for
   you automatically.  Instead, now you have to link against
   libgpgme-pthread for applications using pthread and libgpgme-pth for
   applications using GNU Pth.

   The old code for automagically detecting the thread library is
   still part of libgpgme, but it is DEPRECATED.

 * There are new automake macros AM_PATH_GPGME_PTH and
   AM_PATH_GPGME_PTHREAD, which support checking for thread-enabled
   versions of GPGME.  They define GPGME_PTH_CFLAGS, GPGME_PTH_LIBS,
   GPGME_PTHREAD_CFLAGS and GPGME_PTHREAD_LIBS respectively.  These
   variables of course also include the configuration for the thread
   package itself.  Alternatively, use libtool.

 * gpgme_strerror_r as a thread safe variant of gpgme_strerror was
   added.

 * gpgme-config doesn't support setting the prefix or exec prefix
   anymore.  I don't think it ever worked correctly, and it seems to
   be pointless.

 * gpgme_get_key fails with GPG_ERR_AMBIGUOUS_NAME if the key ID
   provided was not unique, instead returning the first matching key.

 * gpgme_key_t and gpgme_subkey_t have a new field, can_authenticate,
   that indicates if the key can be used for authentication.

 * gpgme_signature_t's status field is now correctly set to an error
   with error code GPG_ERR_NO_PUBKEY if public key is not found.

 * gpgme_new_signature_t's class field is now an unsigned int, rather
   than an unsigned long (the old class field is preserved for
   backwards compatibility).

 * A new function gpgme_set_locale() is provided to allow configuring
   the locale for the crypto backend.  This is necessary for text
   terminals so that programs like the pinentry can be started with
   the right locale settings for the terminal the application is running
   on, in case the terminal has different settings than the system
   default (for example, if it is a remote terminal).  You are highly
   recommended to call the following functions directly after
   gpgme_check_version:

   #include <locale.h>

   setlocale (LC_ALL, "");
   gpgme_set_locale (NULL, LC_CTYPE, setlocale (LC_CTYPE, NULL));
   gpgme_set_locale (NULL, LC_MESSAGES, setlocale (LC_MESSAGES, NULL));

   GPGME can not do this for you, as setlocale is not thread safe, and
   there is no alternative.

 * The signal action for SIGPIPE is now set to SIG_IGN by
   gpgme_check_version, instead the first time a crypto engine is
   started (which is not well defined).

 * In the output of gpgme_hash_algo_name, change RMD160 to RIPEMD160,
   TIGER to TIGER192, CRC32-RFC1510 to CRC32RFC1510, and CRC24-RFC2440
   to CRC24RFC2440.  For now, these strings can be used as the MIC
   parameter for PGP/MIME (if appropriately modified).

 * Interface changes relative to the 0.4.2 release:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gpgme_strerror_t		NEW
gpgme_get_key			CHANGED: Fails correctly if key ID not unique.
gpgme_key_t			EXTENDED: New field can_authenticate.
gpgme_subkey_t			EXTENDED: New field can_authenticate.
gpgme_new_signature_t		CHANGED: New type for class field.
gpgme_set_locale		NEW
gpgme_hash_algo_name		CHANGED: Slight adjustment of algo names.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Noteworthy changes in version 0.4.2 (2003-07-30)
------------------------------------------------

 * Allow gpg-error to be in non-standard place when linking the test suite.

 * Configure will fail now if gpg-error can not be found.

 * Fixed initialized memory backed data objects for writing, which
   caused the test program to crash (but only on Mac OS, surprisingly).

 * Eliminate use of C99 constructs.

 * Small improvements to the manual.


Noteworthy changes in version 0.4.1 (2003-06-06)
------------------------------------------------

 This is the release that 0.4.0 should have been.  There are many
 interface changes, please see below for the details.  The changes are
 sometimes the result of new functionality, but more often express a
 paradigm shift.  Others are an overdue cleanup to get GPGME in line
 with the GNU coding standards and to make the interface more
 self-consistent.  Here is an overview on the changes:

 All types have been renamed to conform to the GNU coding standards,
 most of the time by keeping the whole name in lowercase and inserting
 underscores between words.

 All operations consistently only accept input parameters in their
 invocation function, and return only an error code directly.  Further
 information about the result of the operation has to be retrieved
 afterwards by calling one of the result functions.  This unifies the
 synchronous and the asynchronous interface.

 The error values have been completely replaced by a more
 sophisticated model that allows GPGME to transparently and accurately
 report all errors from the other GnuPG components, regardless of
 process boundaries.  This is achieved by using the library
 libgpg-errors, which is shared by all GnuPG components.  This library
 is now required for GPGME.

 The results of all operations are now provided by pointers to C
 structs rather than by XML structs or in other ways.

 Objects which used to be opaque (for example a key) are now pointers
 to accessible structs, so no accessor functions are necessary.

 Backward compatibility is provided where it was possible without too
 much effort and did not collide with the overall sanitization effort.
 However, this is only for ease of transition.  NO DEPRECATED FUNCTION
 OR DATA TYPE IS CONSIDERED A PART OF THE API OR ABI AND WILL BE
 DROPPED IN THE FUTURE WITHOUT CHANGING THE SONAME OF THE LIBRARY.
 Recommendations how to replace deprecated or removed functionality
 can be found within the description of each change.

 What follows are all changes to the interface and behaviour of GPGME
 in detail.

 * If gpgme.h is included in sources compiled by GCC 3.1 or later,
   deprecated attributes will warn about use of obsolete functions and
   type definitions.  You can suppress these warnings by passing
   -Wno-deprecated-declarations to the gcc command.

 * The following types have been renamed.  The old types are still
   available as aliases, but they are deprecated now:
   Old name:		New name:
   GpgmeCtx		gpgme_ctx_t
   GpgmeData		gpgme_data_t
   GpgmeError		gpgme_error_t
   GpgmeDataEncoding	gpgme_data_encoding_t
   GpgmeSigStat		gpgme_sig_stat_t
   GpgmeSigMode		gpgme_sig_mode_t
   GpgmeAttr		gpgme_attr_t
   GpgmeValidity	gpgme_validity_t
   GpgmeProtocol	gpgme_protocol_t
   GpgmeKey		gpgme_key_t
   GpgmePassphraseCb	gpgme_passphrase_cb_t
   GpgmeProgressCb	gpgme_progress_cb_t
   GpgmeIOCb		gpgme_io_cb_t
   GpgmeRegisterIOCb	gpgme_register_io_cb_t
   GpgmeRemoveIOCb	gpgme_remove_io_cb_t
   GpgmeEventIO		gpgme_event_io_t
   GpgmeEventIOCb	gpgme_event_io_cb_t
   GpgmeIOCbs		gpgme_io_cbs
   GpgmeDataReadCb	gpgme_data_read_cb_t
   GpgmeDataWriteCb	gpgme_data_write_cb_t
   GpgmeDataSeekCb	gpgme_data_seek_cb_t
   GpgmeDataReleaseCb	gpgme_data_release_cb_t
   GpgmeDataCbs		gpgme_data_cbs_t
   GpgmeTrustItem	gpgme_trust_item_t
   GpgmeStatusCode	gpgme_status_code_t

 * gpgme_error_t is now identical to gpg_error_t, the error type
   provided by libgpg-error.  More about using libgpg-error with GPGME
   can be found in the manual.  All error symbols have been removed!

 * All functions and types in libgpg-error have been wrapped in GPGME.
   The new types are gpgme_err_code_t and gpgme_err_source_t.  The new
   functions are gpgme_err_code, gpgme_err_source, gpgme_error,
   gpgme_err_make, gpgme_error_from_errno, gpgme_err_make_from_errno,
   gpgme_err_code_from_errno, gpgme_err_code_to_errno,
   gpgme_strsource.

 * GPGME_ATTR_IS_SECRET is not anymore representable as a string.

 * GnuPG 1.2.2 is required.  The progress callback is now also invoked
   for encrypt, sign, encrypt-sign, decrypt, verify, and
   decrypt-verify operations.  For verify operations on detached
   signatures, the progress callback is invoked for both the detached
   signature and the plaintext message, though.

 * gpgme_passphrase_cb_t has been changed to not provide a complete
   description, but the UID hint, passphrase info and a flag
   indicating if this is a repeated attempt individually, so the user
   can compose his own description from this information.

   The passphrase is not returned as a C string, but must be written
   to a file descriptor directly.  This allows for secure passphrase
   entries.

   The return type has been changed to gpgme_error_t value.  This
   allowed to remove the gpgme_cancel function; just return
   the error code GPG_ERR_CANCELED in the passphrase callback directly.

 * gpgme_edit_cb_t has been changed to take a file descriptor argument.
   The user is expected to write the response to the file descriptor,
   followed by a newline.

 * The recipients interface has been removed.  Instead, you use
   NULL-terminated lists of keys for specifying the recipients of an
   encryption operation.  Use the new encryption flag
   GPGME_ENCRYPT_ALWAYS_TRUST if you want to override the validity of
   the keys (but note that in general this is not a good idea).

   This change has been made to the prototypes of gpgme_op_encrypt,
   gpgme_op_encrypt_start, gpgme_op_encrypt_sign and
   gpgme_op_encrypt_sign_start.

   The export interface has been changed to use pattern strings like
   the keylist interface.  Thus, new functions gpgme_op_export_ext and
   gpgme_op_export_ext_start have been added as well.  Now the
   prototypes of gpgme_op_export_start and gpgme_op_export finally
   make sense.

 * gpgme_op_verify and gpgme_op_decrypt_verify don't return a status
   summary anymore.  Use gpgme_get_sig_status to retrieve the individual
   stati.

 * gpgme_io_cb_t changed from a void function to a function returning
   a gpgme_error_t value.  However, it will always return 0, so you
   can safely ignore the return value.

 * A new I/O callback event GPGME_EVENT_START has been added.  The new
   requirement is that you must wait until this event until you are
   allowed to call the I/O callback handlers previously registered for
   this context operation.  Calling I/O callback functions for this
   context operation before the start event happened is unsafe because
   it can lead to race conditions in a multi-threaded environment.

 * The idle function feature has been removed.  It was not precisely
   defined in a multi-threaded environment and is obsoleted by the
   user I/O callback functions.  If you still need a simple way to
   call something while waiting on one or multiple asynchronous
   operations to complete, don't set the HANG flag in gpgme_wait (note
   that this will return to your program more often than the idle
   function did).

 * gpgme_wait can return NULL even if hang is true, if an error
   occurs.  In that case *status contains the error code.

 * gpgme_get_engine_info was radically changed.  Instead an XML
   string, an info structure of the new type gpgme_engine_info_t is
   returned.  This makes it easier and more robust to evaluate the
   information in an application.

 * The new function gpgme_get_protocol_name can be used to convert a
   gpgme_protocol_t value into a string.

 * The status of a context operation is not checked anymore.  Starting
   a new operation will silently cancel the previous one.  Calling a
   function that requires you to have started an operation before without
   doing so is undefined.

 * The FPR argument to gpgme_op_genkey was removed.  Instead, use the
   gpgme_op_genkey_result function to retrieve a gpgme_genkey_result_t
   pointer to a structure which contains the fingerprint.  This also
   works with gpgme_op_genkey_start.  The structure also provides
   other information about the generated keys.

   So, instead:

   char *fpr;
   err = gpgme_op_genkey (ctx, NULL, NULL, &fpr);
   if (!err && fpr)
     printf ("%s\n", fpr);

   you should now do:

   gpgme_genkey_result_t result;
   err = gpgme_op_genkey (ctx, NULL, NULL);
   if (!err)
     {
       result = gpgme_op_genkey_result (ctx);
       if (result->fpr)
         printf ("%s\n", result->fpr);
     }

 * The new gpgme_op_import_result function provides detailed
   information about the result of an import operation in
   gpgme_import_result_t and gpgme_import_status_t objects.
   Thus, the gpgme_op_import_ext variant is deprecated.

 * The new gpgme_op_sign_result function provides detailed information
   about the result of a signing operation in gpgme_sign_result_t,
   gpgme_invalid_key_t and gpgme_new_signature_t objects.

 * The new gpgme_op_encrypt_result function provides detailed
   information about the result of an encryption operation in
   a GpgmeEncryptResult object.

 * The new gpgme_op_decrypt_result function provides detailed
   information about the result of a decryption operation in
   a GpgmeDecryptResult object.

 * The new gpgme_op_verify_result function provides detailed
   information about the result of an verify operation in
   a GpgmeVerifyResult object.  Because of this, the GPGME_SIG_STAT_*
   values, gpgme_get_sig_status, gpgme_get_sig_ulong_attr,
   gpgme_get_sig_string_attr and gpgme_get_sig_key are now deprecated,
   and gpgme_get_notation is removed.

 * GpgmeTrustItem objects have now directly accessible data, so the
   gpgme_trust_item_get_string_attr and gpgme_trust_item_get_ulong_attr
   accessor functions are deprecated.  Also, reference counting is
   available through gpgme_trust_item_ref and gpgme_trust_item_unref
   (the gpgme_trust_item_release alias for the latter is deprecated).

 * Keys are not cached internally anymore, so the force_update argument
   to gpgme_get_key has been removed.

 * GpgmeKey objects have now directly accessible data so the
   gpgme_key_get_string_attr, gpgme_key_get_ulong_attr,
   gpgme_key_sig_get_string_attr and gpgme_key_sig_get_ulong_attr
   functions are deprecated.  Also, gpgme_key_release is now
   deprecated.  The gpgme_key_get_as_xml function has been dropped.

 * Because all interfaces using attributes are deprecated, the
   GpgmeAttr data type is also deprecated.

 * The new gpgme_op_keylist_result function provides detailed
   information about the result of a key listing operation in
   a GpgmeKeyListResult object.

 * Now that each function comes with its own result retrieval
   interface, the generic gpgme_get_op_info interface is not useful
   anymore and dropped.

 * The type and mode of data objects is not available anymore.

 * Interface changes relative to the 0.4.0 release:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GpgmeCtx			DEPRECATED: Use gpgme_ctx_t.
GpgmeData			DEPRECATED: Use gpgme_data_t.
GpgmeError			DEPRECATED: Use gpgme_error_t.
GpgmeDataEncoding		DEPRECATED: Use gpgme_data_encoding_t.
GpgmeSigStat			DEPRECATED: Use gpgme_sig_stat_t.
GpgmeSigMode			DEPRECATED: Use gpgme_sig_mode_t.
GpgmeAttr			DEPRECATED: Use gpgme_attr_t.
GpgmeValidity			DEPRECATED: Use gpgme_validity_t.
GpgmeProtocol			DEPRECATED: Use gpgme_protocol_t.
GpgmeKey			DEPRECATED: Use gpgme_key_t.
GpgmePassphraseCb		DEPRECATED: Use gpgme_passphrase_cb_t.
GpgmeProgressCb			DEPRECATED: Use gpgme_progress_cb_t.
GpgmeIOCb			DEPRECATED: Use gpgme_io_cb_t.
GpgmeRegisterIOCb		DEPRECATED: Use gpgme_register_io_cb_t.
GpgmeRemoveIOCb			DEPRECATED: Use gpgme_remove_io_cb_t.
GpgmeEventIO			DEPRECATED: Use gpgme_event_io_t.
GpgmeEventIOCb			DEPRECATED: Use gpgme_event_io_cb_t.
GpgmeIOCbs			DEPRECATED: Use gpgme_io_cbs.
GpgmeDataReadCb			DEPRECATED: Use gpgme_data_read_cb_t.
GpgmeDataWriteCb		DEPRECATED: Use gpgme_data_write_cb_t.
GpgmeDataSeekCb			DEPRECATED: Use gpgme_data_seek_cb_t.
GpgmeDataReleaseCb		DEPRECATED: Use gpgme_data_release_cb_t.
GpgmeDataCbs			DEPRECATED: Use gpgme_data_cbs_t.
GpgmeTrustItem			DEPRECATED: Use gpgme_trust_item_t.
GpgmeStatusCode			DEPRECATED: Use gpgme_status_code_t.
gpgme_ctx_t			NEW
gpgme_data_t			NEW
gpgme_recipients_t		NEW
gpgme_error_t			NEW
gpgme_data_encoding_t		NEW
gpgme_sig_stat_t		NEW
gpgme_sig_mode_t		NEW
gpgme_attr_t			NEW
gpgme_validity_t		NEW
gpgme_protocol_t		NEW
gpgme_key_t			NEW
gpgme_passphrase_cb_t		NEW
gpgme_progress_cb_t		NEW
gpgme_io_cb_t			NEW
gpgme_register_io_cb_t		NEW
gpgme_remove_io_cb_t		NEW
gpgme_event_io_t		NEW
gpgme_event_io_cb_t		NEW
gpgme_io_cbs			NEW
gpgme_data_read_cb_t		NEW
gpgme_data_write_cb_t		NEW
gpgme_data_seek_cb_t		NEW
gpgme_data_release_cb_t		NEW
gpgme_data_cbs_t		NEW
gpgme_trust_item_t		NEW
gpgme_status_code_t		NEW
GPGME_{some error code}		REMOVED! Use GPG_ERR_* from libgpg-error.
gpgme_err_code_t		NEW
gpgme_err_source_t		NEW
gpgme_err_code			NEW
gpgme_err_source		NEW
gpgme_error			NEW
gpgme_err_make			NEW
gpgme_error_from_errno		NEW
gpgme_err_make_from_errno	NEW
gpgme_err_code_from_errno	NEW
gpgme_err_code_to_errno		NEW
gpgme_strsource			NEW
gpgme_io_cb_t			CHANGED: Return type from void to GpgmeError.
gpgme_event_io_t		CHANGED: New event type (all numbers changed).
gpgme_passphrase_cb_t		CHANGED: Desc decomposed, write directly to FD.
gpgme_edit_cb_t			CHANGED: Write directly to FD.
gpgme_key_get_string_attr	CHANGED: Don't handle GPGME_ATTR_IS_SECRET.
gpgme_op_verify			CHANGED: Drop R_STAT argument.
gpgme_op_decrypt_verify		CHANGED: Drop R_STAT argument.
gpgme_wait			CHANGED: Can return NULL even if hang is true.
GpgmeIdleFunc                   REMOVED
gpgme_register_idle             REMOVED
GpgmeRecipients			REMOVED
gpgme_recipients_new		REMOVED
gpgme_recipients_release	REMOVED
gpgme_recipients_add_name	REMOVED
gpgme_recipients_add_name_with_validity	REMOVED
gpgme_recipients_count		REMOVED
gpgme_recipients_enum_open	REMOVED
gpgme_recipients_enum_read	REMOVED
gpgme_recipients_enum_close	REMOVED
gpgme_encrypt_flags_t		NEW
GPGME_ENCRYPT_ALWAYS_TRUST	NEW
gpgme_op_encrypt		CHANGED: Recipients passed as gpgme_key_t[].
gpgme_op_encrypt_start		CHANGED: Recipients passed as gpgme_key_t[].
gpgme_op_encrypt_sign		CHANGED: Recipients passed as gpgme_key_t[].
gpgme_op_encrypt_sign_start	CHANGED: Recipients passed as gpgme_key_t[].
gpgme_op_export_start		CHANGED: User IDs passed as patterns.
gpgme_op_export			CHANGED: User IDs passed as patterns.
gpgme_op_export_ext_start	NEW
gpgme_op_export_ext		NEW
gpgme_keylist_mode_t		NEW
gpgme_sigsum_t			NEW
gpgme_engine_info_t		NEW
gpgme_get_engine_info		CHANGED: Return info structure instead XML.
gpgme_get_protocol_name		NEW
gpgme_cancel			REMOVED: Return error in callback directly.
gpgme_op_genkey			CHANGED: FPR argument dropped.
gpgme_op_genkey_result		NEW
gpgme_genkey_result_t		NEW
gpgme_op_import_ext		DEPRECATED: Use gpgme_op_import_result.
gpgme_op_import_result		NEW
gpgme_import_status_t		NEW
gpgme_import_result_t		NEW
gpgme_pubkey_algo_t		NEW
gpgme_hash_algo_t		NEW
gpgme_invalid_key_t		NEW
gpgme_new_signature_t		NEW
gpgme_sign_result_t		NEW
gpgme_op_sign_result		NEW
gpgme_pubkey_algo_name		NEW
gpgme_hash_algo_name		NEW
gpgme_encrypt_result_t		NEW
gpgme_op_encrypt_result		NEW
gpgme_decrypt_result_t		NEW
gpgme_op_decrypt_result		NEW
gpgme_verify_result_t		NEW
gpgme_op_verify_result		NEW
gpgme_get_notation		REMOVED: Access verify result directly instead.
gpgme_get_sig_key		DEPRECATED: Use gpgme_get_key with fingerprint.
gpgme_get_sig_ulong_attr	DEPRECATED: Use verify result directly.
gpgme_get_sig_string_attr	DEPRECATED: Use verify result directly.
GPGME_SIG_STAT_*		DEPRECATED: Use error value in sig status.
gpgme_get_sig_status		DEPRECATED: Use verify result directly.
gpgme_trust_item_t		CHANGED: Now has user accessible data members.
gpgme_trust_item_ref		NEW
gpgme_trust_item_unref		NEW
gpgme_trust_item_release	DEPRECATED: Use gpgme_trust_item_unref.
gpgme_trust_item_get_string_attr DEPRECATED
gpgme_trust_item_get_ulong_attr	DEPRECATED
gpgme_get_key			CHANGED: Removed force_update argument.
gpgme_subkey_t			NEW
gpgme_key_sig_t			NEW
gpgme_user_id_t			NEW
gpgme_key_t			CHANGED: Now has user accessible data members.
gpgme_key_get_string_attr	DEPRECATED
gpgme_key_get_ulong_attr	DEPRECATED
gpgme_key_sig_get_string_attr	DEPRECATED
gpgme_key_sig_get_ulong_attr	DEPRECATED
gpgme_key_get_as_xml		REMOVED
gpgme_key_list_result_t		NEW
gpgme_op_keylist_result		NEW
gpgme_get_op_info		REMOVED
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Noteworthy changes in version 0.4.0 (2002-12-23)
------------------------------------------------

 * Key generation returns the fingerprint of the generated key.

 * New convenience function gpgme_get_key.

 * Supports signatures of user IDs in keys via the new
   GPGME_KEYLIST_MODE_SIGS keylist mode and the
   gpgme_key_sig_get_string_attr and gpgme_key_sig_get_ulong_attr
   interfaces.  The XML info about a key also includes the signatures
   if available.

 * New data object interface, which is more flexible and transparent.

 * Interface changes relative to the 0.3.9 release:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GpgmeDataReadCb			NEW
GpgmeDataWriteCb		NEW
GpgmeDataSeekCb			NEW
GpgmeDataReleaseCb		NEW
GpgmeDataCbs			NEW
gpgme_data_read			CHANGED: Match read() closely.
gpgme_data_write		CHANGED: Match write() closely.
gpgme_data_seek			NEW
gpgme_data_new_from_fd		NEW
gpgme_data_new_from_stream	NEW
gpgme_data_new_from_cbs		NEW
gpgme_data_rewind		DEPRECATED: Replaced by gpgme_data_seek().
gpgme_data_new_from_read_cb	DEPRECATED: Replaced by gpgme_data_from_cbs().
gpgme_data_get_type		REMOVED: No replacement.
gpgme_op_verify			CHANGED: Take different data objects for
				signed text and plain text.
gpgme_op_verify_start		CHANGED: See gpgme_op_verify.
gpgme_check_engine		REMOVED: Deprecated since 0.3.0.
gpgme_op_genkey			CHANGED: New parameter FPR.
GPGME_KEYLIST_MODE_SIGS		NEW
gpgme_key_sig_get_string_attr	NEW
gpgme_key_sig_get_ulong_attr	NEW
gpgme_get_key			NEW
GPGME_ATTR_SIG_CLASS		NEW
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Noteworthy changes in version 0.3.16 (2003-11-19)
-------------------------------------------------

 * Compatibility fixes for GnuPG 1.9.x

Noteworthy changes in version 0.3.15 (2003-02-18)
-------------------------------------------------

 * The progress status is sent via the progress callbacks in
   gpgme_op_edit.

 * Bug fix for signing operations with explicit signer settings for
   the CMS protocol.

Noteworthy changes in version 0.3.14 (2002-12-04)
-------------------------------------------------

 * GPGME-Plug is now in its own package "cryptplug".

 * Workaround for a setlocale problem.  Fixed a segv related to not
   correctly as closed marked file descriptors.

Noteworthy changes in version 0.3.13 (2002-11-20)
-------------------------------------------------

 * Release due to changes in gpgmeplug.

Noteworthy changes in version 0.3.12 (2002-10-15)
-------------------------------------------------

 * Fixed some bux with key listings.

 * The development has been branched to clean up some API issues.
   This 0.3 series will be kept for compatibility reasons; so do don't
   expect new features.

Noteworthy changes in version 0.3.11 (2002-09-20)
-------------------------------------------------

 * Bug fixes.

Noteworthy changes in version 0.3.10 (2002-09-02)
-------------------------------------------------

 * Setting the signing keys for the CMS protocol does now work.

 * The signers setting is honoured by gpgme_op_edit.

Noteworthy changes in version 0.3.9 (2002-08-21)
------------------------------------------------

 * A spec file for creating RPMs has been added.

 * An experimental interface to GnuPG's --edit-key functionality is
   introduced, see gpgme_op_edit.

 * The new gpgme_import_ext function provides a convenient access to
   the number of processed keys.

 * Interface changes relative to the 0.3.8 release:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GpgmeStatusCode			NEW
GpgmeEditCb			NEW
gpgme_op_edit_start		NEW
gpgme_op_edit			NEW
gpgme_op_import_ext		NEW
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Noteworthy changes in version 0.3.8 (2002-06-25)
------------------------------------------------

 * It is possible to use an outside event loop for the I/O to the
   crypto engine by setting the I/O callbacks with gpgme_set_io_cbs.

 * Interface changes relative to the 0.3.6 release:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GpgmeIOCb			NEW
GpgmeRegisterIOCb		NEW
GpgmeRemoveIOCb			NEW
GpgmeEventIO			NEW
GpgmeEventIOCb			NEW
struct GpgmeIOCbs		NEW
gpgme_set_io_cbs		NEW
gpgme_get_io_cbs		NEW
GPGME_ATTR_ERRTOK		NEW
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Noteworthy changes in version 0.3.7 (2002-06-04)
------------------------------------------------

 * GPGME_ATTR_OTRUST is implemented now.

 * A first step toward thread safeness has been achieved, see the
   documentation for details.  Supported thread libraries are pthread
   and Pth.

Noteworthy changes in version 0.3.6 (2002-05-03)
------------------------------------------------

 * All error output of the gpgsm backend is send to the bit bucket.

 * The signature verification functions are extended.  Instead of
   always returning GPGME_SIG_STATUS_GOOD, the functions new codes for
   expired signatures.  2 new functions may be used to retrieve more
   detailed information like the signature expiration time and a
   validity information of the key without an extra key looking.

 * The current passphrase callback and progress meter callback can be
   retrieved with the new functions gpgme_get_passphrase_cb and
   gpgme_get_progress_cb respectively.

 * Interface changes relative to the 0.3.5 release:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gpgme_get_passphrase_cb		NEW
gpgme_get_progress_cb		NEW
GpgmeDataEncoding               NEW
gpgme_data_set_encoding         NEW
gpgme_data_get_encoding         NEW
GPGME_SIG_STAT_GOOD_EXP         NEW
GPGME_SIG_STAT_GOOD_EXPKEY      NEW
gpgme_op_verify                 CHANGED: Returns more status codes.
GPGME_ATTR_SIG_STATUS           NEW
gpgme_get_sig_string_attr       NEW
gpgme_get_sig_ulong_attr        NEW
gpgme_get_protocol              NEW
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Noteworthy changes in version 0.3.5 (2002-04-01)
------------------------------------------------

 * gpgme_op_encrypt can be called with RECIPIENTS being 0.  In this
   case, symmetric encryption is performed.  Note that this requires a
   passphrase from the user.

 * More information is returned for X.509 certificates.

 * Interface changes relative to the 0.3.4 release:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gpgme_op_encrypt		EXTENDED: Symmetric encryption possible
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Noteworthy changes in version 0.3.4 (2002-03-04)
------------------------------------------------

 * gpgme_op_encrypt does now fail with GPGME_Invalid_Recipients if
   some recipients have been invalid, whereas earlier versions
   succeeded in this case.  The plaintext is still encrypted for all valid
   recipients, so the application might take this error as a hint that
   the ciphertext is not usable for all requested recipients.
   Information about invalid recipients is available with gpgme_get_op_info.

 * gpgme_op_verify now allows to pass an uninitialized data object as
   its plaintext argument to check for normal and cleartext
   signatures.  The plaintext is then returned in the data object.

 * New interfaces gpgme_set_include_certs and gpgme_get_include_certs
   to set and get the number of certifications to include in S/MIME
   signed messages.

 * New interfaces gpgme_op_encrypt_sign and gpgme_op_encrypt_sign_start
   to encrypt and sign a message in a combined operation.

 * New interface gpgme_op_keylist_ext_start to search for multiple patterns.

 * gpgme_key_get_ulong_attr supports the GPGME_ATTR_EXPIRE attribute.

 * Interface changes relative to the 0.3.3 release:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gpgme_op_encrypt		CHANGED: Can fail with GPGME_Invalid_Recipients
gpgme_op_verify			EXTENDED: Accepts uninitialized text argument
gpgme_key_get_ulong_attr	EXTENDED: Supports GPGME_ATTR_EXPIRE
gpgme_set_include_certs		NEW
gpgme_get_include_certs		NEW
gpgme_op_encrypt_sign		NEW
gpgme_op_encrypt_sign_start	NEW
gpgme_op_keylist_ext_start	NEW
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Noteworthy changes in version 0.3.3 (2002-02-12)
------------------------------------------------

 * Fix the Makefile in jnlib.

 * Fix the test suite (hopefully).  It should clean up all its state
   with `make check' now.


Noteworthy changes in version 0.3.2 (2002-02-10)
------------------------------------------------

 * Remove erroneous dependency on libgcrypt in jnlib.


Noteworthy changes in version 0.3.1 (2002-02-09)
------------------------------------------------

 * There is a Texinfo manual documenting the API.

 * The gpgme_set_keylist_mode function returns an error, and changed
   its meaning.  It is no longer usable to select between normal and
   fast mode (newer versions of GnuPG will always be fast), but
   selects between local keyring, remote keyserver, or both.
   For this, two new macros are defined, GPGME_KEYLIST_MODE_LOCAL
   and GPGME_KEYLIST_MODE_EXTERN.  To make it possible to modify the
   current setting, a function gpgme_get_keylist_mode was added to
   retrieve the current mode.

 * gpgme_wait accepts a new argument STATUS to return the error status
   of the operation on the context.  Its definition is closer to
   waitpid() now than before.

 * The LENGTH argument to gpgme_data_new_from_filepart changed its
   type from off_t to the unsigned size_t.

 * The R_HD argument to the GpgmePassphraseCb type changed its type
   from void* to void**.

 * New interface gpgme_op_trustlist_end() to match
   gpgme_op_keylist_end().

 * The CryptPlug modules have been renamed to gpgme-openpgp and
   gpgme-smime, and they are installed in pkglibdir by `make install'.

 * An idle function can be registered with gpgme_register_idle().

 * The GpgSM backend supports key generation with gpgme_op_genkey().

 * Interface changes relative to the 0.3.0 release:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gpgme_data_new_from_filepart	CHANGED: Type of LENGTH is size_t.
GpgmePassphraseCb               CHANGED: Type of R_HD is void **.
gpgme_wait                      CHANGED: New argument STATUS.
gpgme_set_keylist_mode          CHANGED: Type of return value is GpgmeError.
                                The function has a new meaning!
gpgme_get_keylist_mode          NEW
GPGME_KEYLIST_MODE_LOCAL        NEW
GPGME_KEYLIST_MODE_EXTERN       NEW
gpgme_op_trustlist_next		NEW
GpgmeIdleFunc                   NEW
gpgme_register_idle             NEW
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Noteworthy changes in version 0.3.0 (2001-12-19)
------------------------------------------------

 * New interface gpgme_set_protocol() to set the protocol and thus the
   crypto engine to be used by the context.  Currently, the OpenPGP
   and the CMS protocols are supported.  They are specified by the new
   preprocessor symbols GPGME_PROTOCOL_OpenPGP and GPGME_PROTOCOL_CMS.
   A new context uses the OpenPGP engine by default.

 * gpgme_get_engine_info() returns information for all crypto engines
   compiled into the library.  The XML format has changed.  To
   reliably get the version of a crypto engine, the <version> tag
   after the appropriate <protocol> tag has to be looked for.

 * New interface gpgme_engine_check_version(), obsoleting
   gpgme_check_engine().  Check the version of all engines you are
   supporting in your software.

 * GpgmeKey lists the user ids in the order as they are returned by
   GnuPG, first the primary key with index 0, then the sub-user ids.

 * New operation gpgme_op_decrypt_verify() to decrypt and verify
   signatures simultaneously.

 * The new interface gpgme_op_keylist_end() terminates a pending
   keylist operation.  A keylist operation is also terminated when
   gpgme_op_keylist_next() returns GPGME_EOF.

 * GPGME can be compiled without GnuPG being installed (`--with-gpg=PATH'),
   cross-compiled, or even compiled without support for GnuPG
   (`--without-gpg').

 * GPGME can be compiled with support for GpgSM (GnuPG for S/MIME,
   `--with-gpgsm=PATH').  It is enabled by default if the `gpgsm' is found
   in the path, but it can also be compiled without support for GpgSM
   (`--without-gpgsm').

 * CryptPlug modules for GPGME are included and can be enabled at
   configure time (`--enable-gpgmeplug').  There is one module which
   uses the GnuPG engine (`gpgmeplug') and one module which uses the
   GpgSM engine (`gpgsmplug').

 * Interface changes relative to the latest 0.2.x release:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gpgme_key_get_as_xml		CHANGED: Sub-user ids reversed in order.
gpgme_key_get_string_attr	CHANGED: User ids reversed in order.
gpgme_key_get_ulong_attr	CHANGED: User ids reversed in order.
gpgme_get_engine_info		CHANGED: New format, extended content.
gpgme_engine_check_version	NEW
gpgme_decrypt_verify_start	NEW
gpgme_decrypt_verify		NEW
gpgme_op_keylist_next		NEW
gpgme_set_protocol		NEW
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Noteworthy changes in version 0.2.3 (2001-09-17)
------------------------------------------------

 * New function gpgme_get_op_info which can be used to get the micalg
   parameter needed for MOSS.

 * New functions gpgme_get_armor and gpgme_get_textmode.

 * The usual bug fixes and some minor functionality improvements.

 * Added a simple encryption component for MS-Windows; however the
   build procedure might have some problems.


Noteworthy changes in version 0.2.2 (2001-06-12)
------------------------------------------------

 * Implemented a key cache.

 * Fixed a race condition under W32 and some other bug fixes.


Noteworthy changes in version 0.2.1 (2001-04-02)
------------------------------------------------

 * Changed debug output and GPGME_DEBUG variable (gpgme/debug.c)

 * Handle GnuPG's new key capabilities output and support revocation
   et al. attributes

 * Made the W32 support more robust.


 Copyright 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009,
           2010 g10 Code GmbH

 This file is free software; as a special exception the author gives
 unlimited permission to copy and/or distribute it, with or without
 modifications, as long as this notice is preserved.

 This file is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY, to the extent permitted by law; without even the
 implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
